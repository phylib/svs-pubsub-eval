From d16b77ee731f2781abbcda2220eadd4a789cd3c6 Mon Sep 17 00:00:00 2001
From: Varun Patil <varunpatil@ucla.edu>
Date: Thu, 5 Aug 2021 03:57:06 +0000
Subject: [PATCH] Save

---
 cmd/dtnd/main.go           | 206 +++++++++++++++++++++++++++++++++++--
 pkg/cla/manager.go         |  34 +++---
 pkg/cla/manager_elem.go    |  10 +-
 pkg/cla/mtcp/client.go     |  11 +-
 pkg/routing/processing.go  |   8 +-
 pkg/storage/bundle_item.go |  26 +++--
 pkg/storage/store.go       |  43 +++++---
 7 files changed, 284 insertions(+), 54 deletions(-)

diff --git a/cmd/dtnd/main.go b/cmd/dtnd/main.go
index 9f9f417..1bfccc3 100644
--- a/cmd/dtnd/main.go
+++ b/cmd/dtnd/main.go
@@ -5,12 +5,33 @@
 package main
 
 import (
+	"math/rand"
 	"os"
 	"os/signal"
+	"strconv"
+	"strings"
+	"time"
 
 	log "github.com/sirupsen/logrus"
+
+	"github.com/dtn7/dtn7-go/pkg/agent"
+	"github.com/dtn7/dtn7-go/pkg/bpv7"
+	"github.com/dtn7/dtn7-go/pkg/cla"
+	"github.com/dtn7/dtn7-go/pkg/cla/mtcp"
+	"github.com/dtn7/dtn7-go/pkg/discovery"
+	"github.com/dtn7/dtn7-go/pkg/routing"
 )
 
+var letters = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
+
+func randSeq(n int) string {
+	b := make([]rune, n)
+	for i := range b {
+		b[i] = letters[rand.Intn(len(letters))]
+	}
+	return string(b)
+}
+
 // waitSigint blocks the current thread until a SIGINT appears.
 func waitSigint() {
 	sig := make(chan os.Signal, 1)
@@ -19,24 +40,193 @@ func waitSigint() {
 	<-sig
 }
 
+var stopPub bool
+
+// pingBundle creates a ping bundle.
+func pingBundle(name string, dest string) (bpv7.Bundle, error) {
+	return bpv7.Builder().
+		CRC(bpv7.CRC32).
+		Source(name).
+		Destination("dtn://" + dest + "/position/").
+		BundleCtrlFlags(bpv7.MustNotFragmented).
+		CreationTimestampNow().
+		Lifetime("6m").
+		HopCountBlock(64).
+		PayloadBlock([]byte(randSeq(1024))).
+		Build()
+}
+
+var recvdBundles map[string]int
+
+func heartBeat(c *routing.Core, logger *log.Logger, nodeName string) {
+	count := 1
+	k := 5000 + rand.Intn(1000) - 500
+	for range time.Tick(time.Millisecond * time.Duration(k)) {
+		if stopPub {
+			return
+		}
+
+		name := "dtn://" + nodeName + "/" + strconv.Itoa(count)
+		recvdBundles[name] = 1
+
+		b, _ := pingBundle(name, "pubsub/~ndn")
+		c.SendBundle(&b)
+
+		logger.Print("PUBL_MSG::" + name)
+		log.Warn("PUBL_MSG::" + name)
+		count++
+	}
+}
+
+type PositionAgent struct {
+	endpoint bpv7.EndpointID
+	receiver chan agent.Message
+	sender   chan agent.Message
+	logger   *log.Logger
+}
+
+func NewPositionAgent(endpoint bpv7.EndpointID, logger *log.Logger) *PositionAgent {
+	p := &PositionAgent{
+		endpoint: endpoint,
+		receiver: make(chan agent.Message),
+		sender:   make(chan agent.Message),
+		logger:   logger,
+	}
+
+	go p.handler()
+
+	return p
+}
+
+func (p *PositionAgent) handler() {
+	defer close(p.sender)
+
+	for m := range p.receiver {
+		switch m := m.(type) {
+		case agent.BundleMessage:
+			sender := m.Bundle.PrimaryBlock.SourceNode.String()
+
+			if _, found := recvdBundles[sender]; found {
+				continue
+			}
+			recvdBundles[sender] = 1
+
+			log.Warn("RECV_MSG::" + sender)
+			p.logger.Print("RECV_MSG::" + sender)
+
+		case agent.ShutdownMessage:
+			return
+
+		default:
+			log.WithField("message", m).Warn("Received unsupported Message")
+		}
+	}
+}
+
+func (p *PositionAgent) Endpoints() []bpv7.EndpointID {
+	return []bpv7.EndpointID{p.endpoint}
+}
+
+func (p *PositionAgent) MessageReceiver() chan agent.Message {
+	return p.receiver
+}
+
+func (p *PositionAgent) MessageSender() chan agent.Message {
+	return p.sender
+}
+
+func startListenTCP(port string, nodeId bpv7.EndpointID) (cla.Convergable, bpv7.EndpointID, cla.CLAType, discovery.Announcement, error) {
+	portInt, err := parseListenPort(port)
+	if err != nil {
+		return nil, nodeId, cla.MTCP, discovery.Announcement{}, err
+	}
+
+	msg := discovery.Announcement{
+		Type:     cla.MTCP,
+		Endpoint: nodeId,
+		Port:     uint(portInt),
+	}
+
+	return mtcp.NewMTCPServer(port, nodeId, true), nodeId, cla.MTCP, msg, nil
+}
+
 func main() {
-	if len(os.Args) != 2 {
-		log.Fatalf("Usage: %s configuration.toml", os.Args[0])
+	if len(os.Args) != 5 {
+		log.Fatalf("Usage: %s /alice/ logfile :port store", os.Args[0])
+	}
+
+	nodeName := os.Args[1]
+	logFile := os.Args[2]
+	portName := os.Args[3]
+	storeName := os.Args[4]
+
+	recvdBundles = make(map[string]int)
+	stopPub = false
+
+	// Configure routing
+	var routingConf routing.RoutingConf
+	routingConf.Algorithm = "epidemic"
+
+	if lvl, err := log.ParseLevel("warn"); err == nil {
+		log.SetLevel(lvl)
 	}
 
-	core, discovery, err := parseCore(os.Args[1])
+	// Start core
+	nodeId := bpv7.MustNewEndpointID("dtn://" + nodeName + "/")
+	core, err := routing.NewCore(storeName, nodeId, true, routingConf, nil)
 	if err != nil {
-		log.WithFields(log.Fields{
-			"error": err,
-		}).Fatal("Failed to parse config")
+		log.Fatal("Could not start core")
+	}
+
+	// Listen TCP
+	convRec, eid, claType, discoMsg, lErr := startListenTCP(portName, nodeId)
+	var discoveryMsgs []discovery.Announcement
+	if lErr != nil {
+		log.Fatal("Could not start TCP listening")
+	} else {
+		core.RegisterCLA(convRec, claType, eid)
+		if discoMsg != (discovery.Announcement{}) {
+			discoveryMsgs = append(discoveryMsgs, discoMsg)
+		}
+	}
+
+	// Discovery
+	ds, derr := discovery.NewManager(
+		core.NodeId, core.RegisterConvergable, discoveryMsgs,
+		time.Duration(3)*time.Second, false, true)
+	if derr != nil {
+		log.Fatal("Could not start discovery listening")
 	}
 
+	// Open logfile
+	logf, err := os.OpenFile(logFile, os.O_WRONLY|os.O_CREATE, 0644)
+	if err != nil {
+		log.Fatal("Could not open logfile")
+	}
+	defer logf.Close()
+	logger := log.New()
+	logger.SetOutput(logf)
+
+	// Start listening
+	log.Warn(core.NodeId.String())
+	agent := NewPositionAgent(bpv7.MustNewEndpointID("dtn://pubsub/~ndn/position/"), logger)
+
+	core.RegisterApplicationAgent(agent)
+
+	// Start publishing
+	if !strings.Contains(nodeName, "uav") {
+		go heartBeat(core, logger, nodeName)
+	}
+
+	waitSigint()
+	stopPub = true
+	log.Info("Stop publishing..")
 	waitSigint()
 	log.Info("Shutting down..")
 
 	core.Close()
 
-	if discovery != nil {
-		discovery.Close()
+	if ds != nil {
+		ds.Close()
 	}
 }
diff --git a/pkg/cla/manager.go b/pkg/cla/manager.go
index 7ea4413..e3abb33 100644
--- a/pkg/cla/manager.go
+++ b/pkg/cla/manager.go
@@ -64,8 +64,8 @@ func NewManager() *Manager {
 
 		listenerIDs: make(map[CLAType][]bpv7.EndpointID),
 
-		inChnl:  make(chan ConvergenceStatus, 100),
-		outChnl: make(chan ConvergenceStatus),
+		inChnl:  make(chan ConvergenceStatus, 200),
+		outChnl: make(chan ConvergenceStatus, 200),
 
 		stopSyn: make(chan struct{}),
 		stopAck: make(chan struct{}),
@@ -118,29 +118,25 @@ func (manager *Manager) handler() {
 					"endpoint": cs.Message.(bpv7.EndpointID),
 				}).Info("CLA Manager received Peer Disappeared, restarting CLA")
 
-				manager.Restart(cs.Sender)
-				manager.outChnl <- cs
+				manager.Unregister(cs.Sender)
+				select {
+				case manager.outChnl <- cs:
+					continue
+				default:
+					log.Error("outChnl full or no consumer.")
+				}
 
 			default:
-				manager.outChnl <- cs
+				select {
+				case manager.outChnl <- cs:
+					continue
+				default:
+					log.Error("outChnl full or no consumer.")
+				}
 			}
 
 		case <-activateTicker.C:
-			manager.convs.Range(func(key, convElem interface{}) bool {
-				ce := convElem.(*convergenceElem)
-				if ce.isActive() {
-					return true
-				}
-
-				if successful, retry := ce.activate(); !successful && !retry {
-					log.WithFields(log.Fields{
-						"cla": ce.conv,
-					}).Warn("Startup of CLA failed, a retry should not be made")
 
-					manager.convs.Delete(key)
-				}
-				return true
-			})
 		}
 	}
 }
diff --git a/pkg/cla/manager_elem.go b/pkg/cla/manager_elem.go
index c741314..68d35e4 100644
--- a/pkg/cla/manager_elem.go
+++ b/pkg/cla/manager_elem.go
@@ -1,4 +1,7 @@
 // SPDX-FileCopyrightText: 2019, 2020 Alvar Penning
+// SPDX-FileCopyrightText: 2021 Markus Sommer
+// SPDX-FileCopyrightText: 2021 Artur Sterz
+// SPDX-FileCopyrightText: 2021 Jonas HÃ¶chst
 //
 // SPDX-License-Identifier: GPL-3.0-or-later
 
@@ -83,7 +86,12 @@ func (ce *convergenceElem) handler() {
 				"status": cs.String(),
 			}).Debug("Forwarding ConvergenceStatus to Manager")
 
-			ce.convChnl <- cs
+			select {
+			case ce.convChnl <- cs:
+				continue
+			default:
+				log.WithField("cla", ce.conv).Error("convChnl full or no consumer.")
+			}
 		}
 	}
 }
diff --git a/pkg/cla/mtcp/client.go b/pkg/cla/mtcp/client.go
index 1700d5b..af96de8 100644
--- a/pkg/cla/mtcp/client.go
+++ b/pkg/cla/mtcp/client.go
@@ -66,7 +66,7 @@ func (client *MTCPClient) Start() (err error, retry bool) {
 		return
 	}
 
-	client.reportChan = make(chan cla.ConvergenceStatus)
+	client.reportChan = make(chan cla.ConvergenceStatus, 200)
 	client.stopSyn = make(chan struct{})
 	client.stopAck = make(chan struct{})
 
@@ -77,7 +77,7 @@ func (client *MTCPClient) Start() (err error, retry bool) {
 }
 
 func (client *MTCPClient) handler() {
-	var ticker = time.NewTicker(5 * time.Second)
+	var ticker = time.NewTicker(3 * time.Second)
 	defer ticker.Stop()
 
 	// Introduce ourselves once
@@ -104,7 +104,12 @@ func (client *MTCPClient) handler() {
 					"error":  err,
 				}).Error("MTCPClient: Keepalive errored")
 
-				client.reportChan <- cla.NewConvergencePeerDisappeared(client, client.GetPeerEndpointID())
+				select {
+				case client.reportChan <- cla.NewConvergencePeerDisappeared(client, client.GetPeerEndpointID()):
+					continue
+				default:
+					log.WithField("client", client.String()).Error("MTCPClient: Reporting channel full or no consumer")
+				}
 			}
 		}
 	}
diff --git a/pkg/routing/processing.go b/pkg/routing/processing.go
index 5a38a11..ee38164 100644
--- a/pkg/routing/processing.go
+++ b/pkg/routing/processing.go
@@ -6,6 +6,7 @@
 package routing
 
 import (
+	"strings"
 	"sync"
 
 	log "github.com/sirupsen/logrus"
@@ -173,7 +174,12 @@ func (c *Core) dispatching(bp BundleDescriptor) {
 		return
 	}
 
-	if c.HasEndpoint(bndl.PrimaryBlock.Destination) {
+	if strings.Contains(bndl.PrimaryBlock.SourceNode.String(), c.NodeId.String()) {
+		c.forward(bp)
+	} else if strings.Contains(c.NodeId.String(), "uav") {
+		c.localDelivery(bp)
+		c.forward(bp)
+	} else if c.HasEndpoint(bndl.PrimaryBlock.Destination) {
 		c.localDelivery(bp)
 	} else {
 		c.forward(bp)
diff --git a/pkg/storage/bundle_item.go b/pkg/storage/bundle_item.go
index 52db0b6..6af014d 100644
--- a/pkg/storage/bundle_item.go
+++ b/pkg/storage/bundle_item.go
@@ -6,8 +6,8 @@ package storage
 
 import (
 	"crypto/sha256"
+	"errors"
 	"fmt"
-	"os"
 	"path"
 	"time"
 
@@ -70,24 +70,30 @@ type BundlePart struct {
 
 // storeBundle serializes the Bundle of a BundleItem/BundlePart to the disk.
 func (bp BundlePart) storeBundle(b bpv7.Bundle) error {
-	if f, err := os.OpenFile(bp.Filename, os.O_WRONLY|os.O_CREATE, 0600); err != nil {
-		return err
-	} else {
-		return b.WriteBundle(f)
-	}
+	AllBundlesLock.Lock()
+	defer AllBundlesLock.Unlock()
+
+	AllBundles[bp.Filename] = b
+	return nil
 }
 
 // deleteBundle removes the serialized Bundle from the disk.
 func (bp BundlePart) deleteBundle() error {
-	return os.Remove(bp.Filename)
+	AllBundlesLock.Lock()
+	defer AllBundlesLock.Unlock()
+	delete(AllBundles, bp.Filename)
+	return nil
 }
 
 // Load the Bundle struct from the disk.
 func (bp BundlePart) Load() (b bpv7.Bundle, err error) {
-	if f, fErr := os.Open(bp.Filename); fErr != nil {
-		err = fErr
+	AllBundlesLock.RLock()
+	defer AllBundlesLock.RUnlock()
+
+	if val, ok := AllBundles[bp.Filename]; ok {
+		b = val
 	} else {
-		b, err = bpv7.ParseBundle(f)
+		err = errors.New("No bundle found for " + bp.Filename)
 	}
 	return
 }
diff --git a/pkg/storage/store.go b/pkg/storage/store.go
index 77cb340..4e393e2 100644
--- a/pkg/storage/store.go
+++ b/pkg/storage/store.go
@@ -8,11 +8,12 @@ package storage
 import (
 	"os"
 	"path"
+	"sync"
 	"time"
 
 	log "github.com/sirupsen/logrus"
 
-	"github.com/timshannon/badgerhold"
+	"github.com/timshannon/bolthold"
 
 	"github.com/dtn7/dtn7-go/pkg/bpv7"
 )
@@ -22,9 +23,13 @@ const (
 	dirBundle string = "bndl"
 )
 
+var AllBundles map[string]bpv7.Bundle
+var AllBundlesLock = sync.RWMutex{}
+var StoreLock = sync.RWMutex{}
+
 // Store implements a storage for Bundles together with meta data.
 type Store struct {
-	bh *badgerhold.Store
+	bh *bolthold.Store
 
 	badgerDir string
 	bundleDir string
@@ -32,15 +37,10 @@ type Store struct {
 
 // NewStore creates a new Store or opens an existing Store from the given path.
 func NewStore(dir string) (s *Store, err error) {
+	AllBundles = make(map[string]bpv7.Bundle)
 	badgerDir := path.Join(dir, dirBadger)
 	bundleDir := path.Join(dir, dirBundle)
 
-	opts := badgerhold.DefaultOptions
-	opts.Dir = badgerDir
-	opts.ValueDir = badgerDir
-	opts.Logger = log.StandardLogger()
-	opts.Options.ValueLogFileSize = 1<<28 - 1
-
 	if dirErr := os.MkdirAll(badgerDir, 0700); dirErr != nil {
 		err = dirErr
 		return
@@ -50,7 +50,7 @@ func NewStore(dir string) (s *Store, err error) {
 		return
 	}
 
-	if bh, bhErr := badgerhold.Open(opts); bhErr != nil {
+	if bh, bhErr := bolthold.Open(badgerDir+"/db.data", 0666, nil); bhErr != nil {
 		err = bhErr
 	} else {
 		s = &Store{
@@ -81,6 +81,9 @@ func (s *Store) Push(b bpv7.Bundle) error {
 			return err
 		}
 
+		StoreLock.Lock()
+		defer StoreLock.Unlock()
+
 		return s.bh.Insert(bi.Id, bi)
 	} else if bi.Fragmented {
 		if !biStore.Fragmented {
@@ -115,6 +118,10 @@ func (s *Store) Push(b bpv7.Bundle) error {
 			}
 
 			biStore.Parts = append(biStore.Parts, compPart)
+
+			StoreLock.Lock()
+			defer StoreLock.Unlock()
+
 			return s.bh.Update(biStore.Id, biStore)
 		}
 	} else {
@@ -128,6 +135,9 @@ func (s *Store) Push(b bpv7.Bundle) error {
 
 // Update an existing BundleItem.
 func (s *Store) Update(bi BundleItem) error {
+	StoreLock.Lock()
+	defer StoreLock.Unlock()
+
 	log.WithFields(log.Fields{
 		"bundle": bi.Id,
 	}).Debug("Store updates BundleItem")
@@ -152,6 +162,9 @@ func (s *Store) Delete(bid bpv7.BundleID) error {
 			}
 		}
 
+		StoreLock.Lock()
+		defer StoreLock.Unlock()
+
 		return s.bh.Delete(bi.Id, BundleItem{})
 	}
 
@@ -161,7 +174,7 @@ func (s *Store) Delete(bid bpv7.BundleID) error {
 // DeleteExpired removes all expired Bundles.
 func (s *Store) DeleteExpired() {
 	var bis []BundleItem
-	if err := s.bh.Find(&bis, badgerhold.Where("Expires").Lt(time.Now())); err != nil {
+	if err := s.bh.Find(&bis, bolthold.Where("Expires").Lt(time.Now())); err != nil {
 		log.WithError(err).Warn("Failed to get expired Bundles")
 		return
 	}
@@ -178,18 +191,24 @@ func (s *Store) DeleteExpired() {
 
 // QueryId fetches the BundleItem for the requested BundleID.
 func (s *Store) QueryId(bid bpv7.BundleID) (bi BundleItem, err error) {
+	StoreLock.RLock()
+	defer StoreLock.RUnlock()
+
 	err = s.bh.Get(bid.Scrub().String(), &bi)
 	return
 }
 
 // QueryPending fetches all pending Bundles.
 func (s *Store) QueryPending() (bis []BundleItem, err error) {
-	err = s.bh.Find(&bis, badgerhold.Where("Pending").Eq(true))
+	StoreLock.RLock()
+	defer StoreLock.RUnlock()
+
+	err = s.bh.Find(&bis, bolthold.Where("Pending").Eq(true))
 	return
 }
 
 // KnowsBundle checks if such a Bundle is known.
 func (s *Store) KnowsBundle(bid bpv7.BundleID) bool {
 	_, err := s.QueryId(bid)
-	return err != badgerhold.ErrNotFound
+	return err != bolthold.ErrNotFound
 }
-- 
2.17.1

